obstacle_range: 3.0
raytrace_range: 3.5

footprint: [[-0.105, -0.105], [-0.105, 0.105], [0.041, 0.105], [0.041, -0.105]]
#robot_radius: 0.105

inflation_radius: 0.5 ########1.5 #MUDEIIIIIIIIIIIIII mas continuou entalando
cost_scaling_factor: 3.0

# # map_type: costmap
# # observation_sources: scan
# # scan: {sensor_frame: base_scan, data_type: LaserScan, topic: scan, marking: true, clearing: true}
# map_type: voxel

# laser_layer_temp:
#   enabled:               true
#   voxel_decay:           0.75     #seconds if linear, e^n if exponential
#   decay_model:           0      #0=linear, 1=exponential, -1=persistent
#   voxel_size:            0.05   #meters
#   track_unknown_space:   true   #default space is unknown
#   observation_persistence: 0.0  #seconds
#   max_obstacle_height:   2.0    #meters
#   unknown_threshold:     15     #voxel height
#   mark_threshold:        0      #voxel height
#   update_footprint_enabled: true
#   combination_method:    1      #1=max, 0=override
#   obstacle_range:        3.0    #meters
#   origin_z:              0.0    #meters
#   publish_voxel_map:     true   # default off
#   transform_tolerance:   0.2    # seconds
#   mapping_mode:          false  # default off, saves map not for navigation
#   map_save_duration:     60     #default 60s, how often to autosave
#   observation_sources: scan

# scan:
#   sensor_frame: base_scan
#   data_type: LaserScan
#   topic: scan
#   marking: true
#   clearing: true
#   expected_update_rate: 0.0    #default 0, if not updating at this rate at least, remove from buffer
#   observation_persistence: 0.0 #default 0, use all measurements taken during now-value, 0=latest
#   inf_is_valid: false          #default false, for laser scans
#   clear_after_reading: true    #default false, clear the buffer after the layer gets readings from it
#   voxel_filter: true           #default off, apply voxel filter to sensor, recommend on
#   voxel_min_points: 0          #default 0, minimum points per voxel for voxel filter

max_obstacle_height: 0.60  # assume something like an arm is mounted on top of the robot

# Obstacle Cost Shaping (http://wiki.ros.org/costmap_2d/hydro/inflation)
robot_radius: 0.20  # distance a circular robot should be clear of the obstacle (kobuki: 0.18)
# footprint: [[x0, y0], [x1, y1], ... [xn, yn]]  # if the robot is not circular

map_type: costmap

static_layer:
  enabled: true
  map_topic: map

obstacle_layer:
  enabled:              true
  voxel_decay:          0.75     #seconds if linear, e^n if exponential
  decay_model:          0      #0=linear, 1=exponential, -1=persistent
  voxel_size:           0.05   #meters
  max_obstacle_height:  0.6
  origin_z:             0.0
  z_resolution:         0.2
  z_voxels:             2
  unknown_threshold:    15
  mark_threshold:       0
  combination_method:   1
  track_unknown_space:  true    #true needed for disabling global path planning through unknown space
  obstacle_range: 2.5
  raytrace_range: 3.0
  origin_z: 0.0
  z_resolution: 0.2
  z_voxels: 2
  publish_voxel_map: true # false
  observation_sources:  scan # bump
  scan:
    data_type: LaserScan
    topic: scan
    marking: true
    clearing: true
    min_obstacle_height: 0.25
    max_obstacle_height: 0.35
    voxel_filter: true           #default off, apply voxel filter to sensor, recommend on
    voxel_min_points: 0          #default 0, minimum points per voxel for voxel filter
  # bump:
  #   data_type: PointCloud2
  #   topic: mobile_base/sensors/bumper_pointcloud
  #   marking: true
  #   clearing: false
  #   min_obstacle_height: 0.0
  #   max_obstacle_height: 0.15
  # # for debugging only, let's you see the entire voxel grid

#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:  5.0  # exponential rate at which the obstacle cost drops off (default: 10)
  inflation_radius:     0.5  # max. distance from an obstacle at which costs are incurred for planning paths.

